---
# Vérifie qu'il y a au moins un hôte kube_control_plane
- name: Ensure at least one kube_control_plane
  fail:
    msg: "No kube_control_plane hosts available!"
  when: groups['kube_control_plane'] | length == 0

# Vérifie qu'il y a au moins un hôte kube_node
- name: Ensure at least one kube_node
  fail:
    msg: "No kube_node hosts available!"
  when: groups['kube_node'] | length == 0

# Installe kubelet, kubeadm, kubectl
- name: Install kubelet, kubeadm, kubectl
  ansible.builtin.dnf:
    name:
      - iproute-tc
    state: present
  become: true

# Définit des faits pour le rôle
- name: Set facts for the role
  set_fact:
    k8s_conf_path: /etc/modules-load.d/k8s.conf  # Chemin du fichier de configuration Kubernetes
    sysctl_params:  # Paramètres sysctl pour la configuration réseau de Kubernetes
      - name: 'net.bridge.bridge-nf-call-iptables'
        value: 1
      - name: 'net.bridge.bridge-nf-call-ip6tables'
        value: 1
      - name: 'net.ipv4.ip_forward'
        value: 1
    user_home: "{{ ansible_env.HOME }}"  # Répertoire personnel de l'utilisateur
    user_name: "{{ ansible_env.USER }}"  # Nom de l'utilisateur

# Désactive le service Firewalld
- name: Disable Firewalld service
  ansible.builtin.systemd:
    name: firewalld
    enabled: no
    state: stopped
  become: true

# Désactive tous les espaces d'échange (swap)
- name: Disable swap if present
  command: swapoff -a
  ignore_errors: yes
  changed_when: false
  become: true

- name: Comment swap entry in fstab
  lineinfile:
    dest: /etc/fstab
    regexp: 'swap'
    state: absent
  become: true

# Met SELinux en mode permissif
- name: Set SELinux to permissive mode
  ansible.builtin.selinux:
    state: permissive
    policy: targeted
  become: true

- name: Update SELinux config file
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX=enforcing$'
    line: 'SELINUX=permissive'
  become: true

# Crée le fichier de configuration des modules Kubernetes
- name: Configure modules-load.d/k8s.conf
  ansible.builtin.blockinfile:
    path: "{{ k8s_conf_path }}"
    create: yes
    block: |
      overlay
      br_netfilter
  become: true

# Charge les modules kernel spécifiés
- name: Load kernel modules
  ansible.builtin.modprobe:
    name: "{{ item }}"
  become: true
  loop:
    - overlay
    - br_netfilter

# Configure les paramètres sysctl pour Kubernetes
- name: Configure sysctl parameters for Kubernetes
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
  become: true
  loop: "{{ sysctl_params }}"

# Applique immédiatement tous les paramètres sysctl
- name: Apply sysctl params
  ansible.builtin.command:
    cmd: sysctl --system
  become: true

#================================================================================================================================
# Installe les exigences de Longhorn
- name: Install Longhorn requirements
  block:
    # Installe les utilitaires de l'initiateur iSCSI
    - name: Install iSCSI initiator utilities
      ansible.builtin.dnf:
        name: "iscsi-initiator-utils"
        state: present
      become: true

    # Assure que le service iscsid est activé et démarré
    - name: Enable and start iscsid service
      ansible.builtin.systemd:
        name: iscsid
        enabled: yes
        state: started
      become: true
  when: (enabled_longhorn | default(false))

#================================================================================================================================
# Déploie les templates de configuration Kubernetes et CRI-O
- name: Deploy Kubernetes configuration template
  template:
    src: kubernetes.repo.j2
    dest: /etc/yum.repos.d/kubernetes.repo
  become: true

- name: Deploy CRI-O configuration template
  template:
    src: cri-o.repo.j2
    dest: /etc/yum.repos.d/cri-o.repo
  become: true

# Installe Cri-O et les outils Cri-Tools
- name: Install Cri-O and Cri-Tools
  ansible.builtin.dnf:
    name: "cri-o"
    state: present
  become: true

# Active et démarre le service Cri-O
- name: Enable and start Cri-O service
  ansible.builtin.systemd:
    name: crio
    enabled: yes
    state: started
  become: true

# Installe kubelet, kubeadm, et kubectl
- name: Install kubelet, kubeadm, kubectl
  ansible.builtin.dnf:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    disable_excludes: kubernetes
  become: true

# Active et démarre le service kubelet
- name: Enable and start kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes
    state: started
  become: true
